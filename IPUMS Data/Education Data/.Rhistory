mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
carriers=c(unique(Q9$carrier),unique(Q9$carrier),unique(Q9$carrier))
carriers
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in c("1","2","3")) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay))
mean_arr_delay[i]=mean(temp$arr_delay)
diff_df[i]=j
}}
diff_df
mean_arr_delay
diff_uniq=c("1","2","3")
diff_uniq=c("1","2","3")
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq(j))
mean_arr_delay[(j-1)*length(carriers)+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)+i]=j
}}
diff_df
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)+i]=j
}}
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_uniq=c("1","2","3")
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
}
mean_arr_delay
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
```
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
mean_arr_delay=c()
diff_df=c()
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers)/3)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
ggplot(difficulty_df, aes(carriers, diff_df)) + geom_tile(aes(fill=mean_arr_delay))
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier=carriers[i])
mean_arr_delay=mean(temp$arr_delay)
}
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
mean_arr_delay=mean(temp$arr_delay)
}
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(mean_dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_dep_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay)
summary_df
mutate(summary_df, diff=mean_arr_delay-mean_dep_delap)
mutate(summary_df, diff=mean_arr_delay-mean_dep_delay)
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
ggplot(summary_df, aes(carriers, y = arrange(mean_dep_delay, desc())))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
mean_arr_delay
mean_dep_delay
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, -score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mean_dep_delay=c()
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp)
}
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp$carrier)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
ggplot(summary_df, aes(x=reorder(carriers, +score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
one")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.7*mean_arr_delay + .3*mean_dep_delay)
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score"")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',positoin="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/IPUMS Data/Economics Data")
read.csv("economics_ipums_extract.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
A
#Import Libraries
require(tidyverse)
require(stringr)
require(forcats)
require(ggplot2)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
read.csv("economics_ipums_extract.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
A
#Read in County FIPS Key
read.csv("fips_codes_website.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
B
read.csv("../../Diversity Analysis/fips_codes_website.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
B
#convert to tibble so dplyr can work its magic
A_df = tbl_df(A)
#format FIPs in source file!
head(A_df)
A_df_char = mutate(A_df, SFIP_char = as.character(STATEFIP), CFIP_char = as.character(COUNTYFIPS))
A_df_char$SFIP_char = str_pad(A_df_char$SFIP_char, 2, pad = "0")
A_df_char$CFIP_char = str_pad(A_df_char$CFIP_char, 3, pad = "0")
head(A_df_char)
A_df_char = mutate(A_df_char, FIPS = paste(SFIP_char, CFIP_char, sep = ""))
A_df_char = mutate(A_df_char, FIPS = paste(SFIP_char, CFIP_char, sep = ""))
head(B)
B2 = filter (B, Entity.Description == "County")
head(B2)
B2$State.FIPS.Code = as.character(B2$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = str_pad(B2$State.FIPS.Code, 2, pad = "0")
B2$County.FIPS.Code = str_pad(B2$County.FIPS.Code, 3, pad = "0")
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
head(B2)
filter(B2, FIPS == "15003")
unique(A_df_char)
unique(A_df_char$FIPS)
count(unique(A_df_char$FIPS))
head(A_df_char)
View(B2)
View(B)
View(B2)
A_df_char %>% group_by(FIPS) %>%
summarise('10%' = quantile(INCWAGE, probs = .1))
A_df_char %>% group_by(FIPS) %>%
summarise('10%' = quantile(PERWT, probs = .1))
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise('10%' = quantile(PERWT, probs = .1))
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise('10%' = quantile(INCWAGE, probs = .1))
View(A)
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise('10%' = quantile(POVERTY, probs = .1))
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise('10%' = quantile(POVERTY, probs = .1),
'90%' = quantile(POVERTY, probs = .9))
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise('10%' = quantile(POVERTY, probs = .25),
'90%' = quantile(POVERTY, probs = .75))
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise(q1 = quantile(POVERTY, probs = .25),
q3= quantile(POVERTY, probs = .75),
IQR = q3-q1)
A_df_char %>% dplyr::group_by(FIPS) %>%
dplyr::summarise(q1 = quantile(POVERTY, probs = .25),
q3= quantile(POVERTY, probs = .75),
IQR = q3-q1) -> C
histogram(C$IQR)
hist(C$IQR)
#HAVE TO ADD COLUMNS FOR EACH RACE, WHICH WILL MAKE SUMMARIZING EASIER
A2=A_df_char %>% mutate(W = ifelse(RACE==1,1,0))
A2 = A2 %>% mutate(B = ifelse(RACE==2,1,0))
A2 = A2 %>% mutate(AI = ifelse(RACE==3,1,0))
A2 = A2 %>% mutate(C = ifelse(RACE==4,1,0))
A2 = A2 %>% mutate(J = ifelse(RACE==5,1,0))
A2 = A2 %>% mutate(PI = ifelse(RACE==6,1,0))
A2 = A2 %>% mutate(O = ifelse(RACE==7 | RACE == 8 | RACE == 9 ,1,0))
#summarise race rsults and create diversity index
by_county = A2 %>% group_by(FIPS) %>% dplyr::summarise( tot = n(), W = sum(W)/tot, B = sum(B)/tot, AI = sum (AI)/tot, C = sum(C)/tot, J = sum(J)/tot, PI = sum(PI)/tot, O = sum(O)/tot)
by_county = mutate(by_county,TOT = W+B+AI+C+J+PI+O)
by_county = by_county %>% mutate(DiversityIndex = 1 - W^2-B^2-AI^2-C^2 -J^2 - PI^2 - O^2) #calculate diversity indec
by_county = arrange(by_county, desc(DiversityIndex)) #arrange in descenting order
by_county
mapping = select(by_county, FIPS, DiversityIndex)
D = left_join(C,mapping, FIPS)
C
mapping
D = left_join(C,mapping, FIPS)
D = left_join(C, mapping, by = FIPS)
D = dplyr::left_join(C, mapping, by = FIPS)
D = dplyr::left_join(by = FIPS, C, mapping)
D = dplyr::inner_join(C, mapping, by = FIPS)
D = dplyr::inner_join(C, mapping, by = c("FIPS"))
D
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point()#Create point graph
linegraph
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph
require(dplyr)
library(plyr)
library(data.table)
library(ggplot2)
setwd('C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Source\ Data')  #Set the working directory
divindex = read.csv("Diversity\ Index\ Per\ County.csv", header = TRUE, stringsAsFactors = FALSE)
divindex = subset(divindex, divindex$STATE != "") %>% select(COUNTY, STATE, Diversity.Index)
divindex = mutate(divindex, STATE = substr(divindex$STATE, 2,3))
divindex = mutate(divindex, COUNTYSTATE = paste(COUNTY, STATE, sep = ", "))
countydata = read.csv("national_county.csv", header = FALSE, stringsAsFactors = FALSE)
countydata = mutate(countydata, fullname = paste(V4, V1, sep = ", "))
countydata = select(countydata, -V5)
countydata = rename(countydata, c("V1"="STATE", "V2"="STATEFIP", "V3"="COUNTYFIPS", "V4"="COUNTY", "fullname"="fullname"))
setwd('C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/IPUMS\ Data/Education\ Data')  #Set the working directory
edudata = read.csv("ipums_educ.csv", header = TRUE, stringsAsFactors = FALSE) # Load data csv
# Data cleaning and manipulation
school1 = select(edudata, -GQ, -DATANUM, -RACE, -RACED, -PERNUM, -PERWT, -SERIAL, -HHWT)
school2 = subset(school1, edudata$SCHOOL == 1 & edudata$YEAR == 2011 & edudata$COUNTYFIPS != 0)
school3 = inner_join(school2, countydata, by="STATEFIP", "COUNTYFIPS")
school4 = subset(school3, school3$COUNTYFIPS.x == school3$COUNTYFIPS.y)
school5 = select(school4, -REGION, -YEAR, -SCHOOL, -COUNTYFIPS.y, -fullname)
school5 = rename(school5, c("STATEFIP"="STATEFIP", "COUNTY.x"="COUNTY.x", "COUNTYFIPS.x"="COUNTYFIPS.x", "EDUC"="EDUC", "EDUCD"="EDUCD", "STATE"="STATE", "COUNTY.y"="COUNTY"))
school6 = full_join(school5, divindex, by="COUNTY")
school7 = subset(school6, school6$STATE.x == school6$STATE.y)
school8 = mutate(school7, STATECOUNTY=paste(COUNTY, STATE.x, sep=", "))
school9 = select(school8, EDUC, EDUCD, STATECOUNTY, Diversity.Index)
school10= as.data.frame(table(school9$STATECOUNTY))
school11 = rename(school10, c("Var1"="STATECOUNTY", "Freq"="freq"))
# Cleaning
# The All important education index
school12.dt = data.table(school9)
school13 = school12.dt[,list(EDUC=(sum(EDUC))), by="STATECOUNTY"]
school14 = inner_join(school13, school11, by="STATECOUNTY")
school15 = mutate(school14, avg = EDUC/freq)
school16 = inner_join(school15, school9, by="STATECOUNTY")
school17 = school16[!duplicated(school16[,c('STATECOUNTY','avg')]),] %>% select(-EDUC.y, -EDUCD)
linegraph = ggplot(school17, aes(x=Diversity.Index, y=avg)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Diversity by Education Level", x="Diversity Index", y="Education")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph
require(tidyverse)
require(stringr)
require(ggplot2)
require(forcats)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
library(tidyverse)
dat<-read.csv("CC-EST2015-ALLDATA.csv",header = TRUE)
head(dat)
##FOR ALL AGE GROUPS AND FOR YEAR 2015
filter(AGEGRP==0 & YEAR==8)
dat2015<-dat %>%
##DO NOT COUNT HISPANIC
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE, formula = y ~ x)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE, formula = y ~ x)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE, formula = y ~ x)+
stat_poly_eq(formula = y ~ x ,eq.with.lhs = "italic(hat(y))~`=`~",aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
linegraph
install.packages("ggpmisc")
library(ggpmisc)
install.packages("ggpmisc")
y ~ x
D$DiversityIndex ~ D$IQR
lm(formula =D$IQR ~ D$DiversityIndex)
fit - lm(formula =D$IQR ~ D$DiversityIndex)
summary(fit)
fit = lm(formula =D$IQR ~ D$DiversityIndex)
summary(fit)
ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
geom_smooth(method=lm, se=TRUE, formula = y ~ x) +
geom_text("y = 290.994 + 56.665x")
require(tidyverse)
require(stringr)
require(forcats)
require(ggplot2)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
geom_smooth(method=lm, se=TRUE, formula = y ~ x) +
geom_text("y = 290.994 + 56.665x")
ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
geom_smooth(method=lm, se=TRUE, formula = y ~ x) +
geom_text("y = 290.994 + 56.665x")
geom_text('y=290+jifiox')
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
linegraph = linegraph + geom_smooth(method=lm, se=TRUE, formula = y ~ x) +
geom_text('y=290+jifiox')
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
linegraph = linegraph + geom_smooth(method=lm, se=TRUE) +
geom_text('y=290+jifiox')
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() + #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR") +
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_text('y=290+jifiox')
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .2, y =  400, label ='y=290+jifiox')
linegraph
summary(fit)
linegraph = linegraph + geom_label(x = .2, y =  450, label ='y = 290.994 + 56.665x', fontsize = 18)
linegraph
linegraph = linegraph + geom_label(x = .2, y =  450, label ='y = 290.994 + 56.665x', size = 18)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .2, y =  450, label ='y = 290.994 + 56.665x', size = 6)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .4, y =  450, label ='y = 290.994 + 56.665x', size = 4)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="Income Gap Varies with Diversity", x="Diversity Index", y="IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .3, y =  450, label ='y = 290.994 + 56.665x', size = 5)
linegraph
fit = lm(formula =D$IQR ~ D$DiversityIndex)
summary(fit)
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="More Diverse Counties Have a Higher Income Gap", x="Diversity Index", y="County Income IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .3, y =  450, label ='y = 290.994 + 56.665x', size = 5)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="More Diverse Counties Have a Higher Income Gap", x="Diversity Index", y="County Income IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .3, y =  150, label ='y = 290.994 + 56.665x', size = 5)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="More Diverse Counties Have a Higher Income Gap", x="Diversity Index", y="County Income IQR")
linegraph = linegraph + geom_label(x = .3, y =  150, label ='y = 290.994 + 56.665x', size = 5)
linegraph = linegraph + geom_smooth(method=loess, se=TRUE)
linegraph
linegraph = ggplot(D, aes(x=DiversityIndex, y=IQR)) + geom_point() #Create point graph
linegraph = linegraph + labs(title="More Diverse Counties Have a Higher Income Gap", x="Diversity Index", y="County Income IQR")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph = linegraph + geom_label(x = .3, y =  150, label ='y = 290.994 + 56.665x', size = 5)
linegraph
