myvector[8] =sum(VXlist$arr_delay)/ nrow(VXlist)
myvector[9] =sum(WNlist$arr_delay)/ nrow(WNlist)
myvector[10] =sum(HAlist$arr_delay)/ nrow(HAlist)
myvector[11] =sum(ASlist$arr_delay)/ nrow(ASlist)
myvector[12] =sum(USlist$arr_delay)/ nrow(USlist)
myvector[13] =sum(FLlist$arr_delay)/ nrow(FLlist)
print(myvector)
b = ggplot(myvector, aes(fl))
g = as.table(myvector)
print(g)
g = as.table(myvector, row.names = "UA", "DL")
print(g)
g = as.table(myvector, row.names = c("UA", "DL"))
print(g)
g = as.table(myvector, dnn = c("UA", "DL"))
print(g)
names(g) = c("b", "b")
print(g)
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g)
ggplot(data = g) + geom_bar(stat="identity")
ggplot(data = myvector) + geom_bar(stat="identity")
f = as.data.frame(myvector)
ggplot(data = f) + geom_bar(stat="identity")
qplot(data = myvector, geom = "bar")
g = as.table(myvector) # Creates table, next line assigns labels to columns
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g)
airlines = unique(flights$carrier)
# Again, we remove data for which there is no data (NA)
flights2 = filter(flights,is.na(flights$arr_delay) == FALSE)
# Here, we calculate the average delay of each carrier
avg_delay_by_carrier = aggregate(flights2$arr_delay,list(flights2$carrier),mean)
#Before I conclude, I want to check to see what percentage of rows have missing data for arrival delay. If a large % are missing data, I'll need to look at other metrics
number_na = nrow(flights2)
percent_na = (100*(1-(number_na/nrow(flights))))
#Only 2.8% of rows are missing
#However, the average value for a given airline could be skewed heavily if a large percentage of its data is missing
#Thus, I'll look at % of missing data for arrival delay for each airline
#Initialize empty vector
percent_na_by_airline = vector(mode="numeric", length=0)
#Loop through each carrier and calculate % of rows missing value for arrival delay
for (airline in airlines){
percent_na_by_airline[airline] = 100*(sum(is.na(flights$arr_delay)& flights$carrier == airline))/(nrow(flights[flights$carrier == airline,]))
}
print(percent_na_by_airline)
#All of the carriers have a low frequency of missing values for arrival delay, so I'll plot the results I found earlier
ggplot(data =avg_delay_by_carrier)+aes(Group.1,y=x)+geom_bar(stat="identity")
#Include table of results
avg_delay_by_carrier
ggplot(data = avg_del
View(earlymorning)
#percent_na_by_airline = vector(mode="numeric", length=0)
# Chunk 1: setup
# Import the flights data set?
library(nycflights13)
library(dplyr)
library(ggplot2)
# install.packages("nycflights13")
Q0 <- filter(flights, dep_delay >= 2)
sum(Q0$dep_delay < 2) == 0
# Question 1
# Obtain data set where destination is Houston
Q1 = filter(flights, dest == "IAH" | dest == "HOU")
sum(Q1$dest != "IAH" & Q1$dest != "HOU") == 0
# Question 2
# Obtain data set where plane departed an hour late but made up 30 mins during flight
Q2 = filter(flights, (dep_delay >= 60) & (arr_delay == dep_delay - 30))
sum(Q2$dep_delay < 60 & Q2$arr_delay != Q2$dep_delay - 30) == 0
# Question 3
#Find all flights that left between 6AM and 11AM
Q3 = filter(flights, (dep_time >= 600) & (dep_time <= 1100))
sum(Q3$dep_time < 600 & Q3$dep_time > 1100) == 0
# Question 4
# The between method checks if values in fall into a specified range. We can use it to efficiently answer Question 3 because we can easily check if a flight falls between 6AM and 11AM.
Q4 = filter(flights, between(flights$dep_time, 600, 1100) == TRUE)
sum(Q4$dep_time[between(Q4$dep_time, 1101, 2359)] + Q4$dep_time[between(Q4$dep_time, 0, 559)]) == 0
# Question 5
# Finds all flights with missing depart
Q5 = filter(flights, is.na(dep_time))
# Question 6
# Find the top 10 carriers w/ most departure delay time.
Q6 = filter(flights, dep_time > 0) # Creates a object with necessary things
Q6 = Q6[order(Q6$dep_delay, decreasing = TRUE),] # Sorts the object based on the departure delay column
head(Q6$carrier, n = 10) # Returns the first 10 carriers
# Question 7
# Select all data sets that we have been working with in previous questions
myvars = c("dep_time","dep_delay","dest","arr_delay","dep_time","carrier")
Q7  = select(flights, one_of(myvars))
# Question 8
# Convert all the times
Q8 = mutate(flights, dep_time_minutes = (flights$dep_time %/% 100)*60 + flights$dep_time %% 100,sched_dep_time_minutes = (flights$sched_dep_time %/% 100)*60 + flights$sched_dep_time %% 100)
tail(flights)
# Question 9
# Create a metric for figuring out the things
# For each of the different carriers, we created a different data set, making sure to exclude the data entries that had a missing arrival delay. Then, we placed these into a one-dimensional vector and then averaged them . We ended up with one dimensional vector which was converted to a table. To finish, we changed the column names of the table to reflect the
carrierlist = c(B6, AA, UA, DL, EV, MQ, 9E, VX, WN, HA, AS, FL, US)
B6list = filter(flights, carrier == "B6" & !is.na(arr_delay))
AAlist = filter(flights, carrier == "AA"& !is.na(arr_delay))
UAlist = filter(flights, carrier == "UA"& !is.na(arr_delay))
DLlist = filter(flights, carrier == "DL"& !is.na(arr_delay))
EVlist = filter(flights, carrier == "EV"& !is.na(arr_delay))
MQlist = filter(flights, carrier == "MQ"& !is.na(arr_delay))
elist = filter(flights, carrier == "9E"& !is.na(arr_delay))
VXlist = filter(flights, carrier == "VX"& !is.na(arr_delay))
WNlist = filter(flights, carrier == "WN"& !is.na(arr_delay))
HAlist = filter(flights, carrier == "HA"& !is.na(arr_delay))
ASlist = filter(flights, carrier == "AS"& !is.na(arr_delay))
USlist = filter(flights, carrier == "US"& !is.na(arr_delay))
FLlist = filter(flights, carrier == "FL"& !is.na(arr_delay))
carrierfilter = c(B6list, AAlist, UAlist, DLlist, EVlist, MQlist, elist, VXlist, WNlist, HAlist, ASlist, USlist, FLlist)
myvector = vector("integer", 13)
myvector[1] = sum(B6list$arr_delay)/ nrow(B6list)
myvector[2] = sum(AAlist$arr_delay)/ nrow(AAlist)
myvector[3] =sum(UAlist$arr_delay)/ nrow(UAlist)
myvector[4] =sum(DLlist$arr_delay) / nrow(DLlist)
myvector[5] =sum(EVlist$arr_delay) / nrow(EVlist)
myvector[6] =sum(MQlist$arr_delay)/ nrow(MQlist)
myvector[7] =sum(elist$arr_delay)/ nrow(elist)
myvector[8] =sum(VXlist$arr_delay)/ nrow(VXlist)
myvector[9] =sum(WNlist$arr_delay)/ nrow(WNlist)
myvector[10] =sum(HAlist$arr_delay)/ nrow(HAlist)
myvector[11] =sum(ASlist$arr_delay)/ nrow(ASlist)
myvector[12] =sum(USlist$arr_delay)/ nrow(USlist)
myvector[13] =sum(FLlist$arr_delay)/ nrow(FLlist)
f = as.data.frame(myvector)
g = as.table(myvector) # Creates table, next line assigns labels to columns
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g)
# To create a graphical representation of the data, we manipulate the data set in a slightly different way:
#First, we create a vector listing all distinct characters
airlines = unique(flights$carrier)
# Again, we remove data for which there is no data (NA)
flights2 = filter(flights,is.na(flights$arr_delay) == FALSE)
# Here, we calculate the average delay of each carrier
avg_delay_by_carrier = aggregate(flights2$arr_delay,list(flights2$carrier),mean)
#Before I conclude, I want to check to see what percentage of rows have missing data for arrival delay. If a large % are missing data, I'll need to look at other metrics
number_na = nrow(flights2)
percent_na = (100*(1-(number_na/nrow(flights))))
#Only 2.8% of rows are missing
#However, the average value for a given airline could be skewed heavily if a large percentage of its data is missing
#Thus, I'll look at % of missing data for arrival delay for each airline
#Initialize empty vector
#percent_na_by_airline = vector(mode="numeric", length=0)
#Loop through each carrier and calculate % of rows missing value for arrival delay
#for (airline in airlines){
#  percent_na_by_airline[airline] = 100*(sum(is.na(flights$arr_delay)& flights$carrier == #airline))/(nrow(flights[flights$carrier == airline,]))
#}
print(percent_na_by_airline)
#All of the carriers have a low frequency of missing values for arrival delay, so I'll plot the results I found earlier
# Plot the results
ggplot(data = avg_delay_by_carrier) + aes(Group.1, y=x) + geom_bar(stat="identity")
print(flights)
# Chunk 1: setup
# Import the flights data set?
library(nycflights13)
library(dplyr)
library(ggplot2)
# install.packages("nycflights13")
Q0 <- filter(flights, dep_delay >= 2)
sum(Q0$dep_delay < 2) == 0
# Question 1
# Obtain data set where destination is Houston
Q1 = filter(flights, dest == "IAH" | dest == "HOU")
sum(Q1$dest != "IAH" & Q1$dest != "HOU") == 0
# Question 2
# Obtain data set where plane departed an hour late but made up 30 mins during flight
Q2 = filter(flights, (dep_delay >= 60) & (arr_delay == dep_delay - 30))
sum(Q2$dep_delay < 60 & Q2$arr_delay != Q2$dep_delay - 30) == 0
# Question 3
#Find all flights that left between 6AM and 11AM
Q3 = filter(flights, (dep_time >= 600) & (dep_time <= 1100))
sum(Q3$dep_time < 600 & Q3$dep_time > 1100) == 0
# Question 4
# The between method checks if values in fall into a specified range. We can use it to efficiently answer Question 3 because we can easily check if a flight falls between 6AM and 11AM.
Q4 = filter(flights, between(flights$dep_time, 600, 1100) == TRUE)
sum(Q4$dep_time[between(Q4$dep_time, 1101, 2359)] + Q4$dep_time[between(Q4$dep_time, 0, 559)]) == 0
# Question 5
# Finds all flights with missing depart
Q5 = filter(flights, is.na(dep_time))
# Question 6
# Find the top 10 carriers w/ most departure delay time.
Q6 = filter(flights, dep_time > 0) # Creates a object with necessary things
Q6 = Q6[order(Q6$dep_delay, decreasing = TRUE),] # Sorts the object based on the departure delay column
head(Q6$carrier, n = 10) # Returns the first 10 carriers
# Question 7
# Select all data sets that we have been working with in previous questions
myvars = c("dep_time","dep_delay","dest","arr_delay","dep_time","carrier")
Q7  = select(flights, one_of(myvars))
# Question 8
# Convert all the times
Q8 = mutate(flights, dep_time_minutes = (flights$dep_time %/% 100)*60 + flights$dep_time %% 100,sched_dep_time_minutes = (flights$sched_dep_time %/% 100)*60 + flights$sched_dep_time %% 100)
tail(flights)
# Question 9
# Create a metric for figuring out the things
# For each of the different carriers, we created a different data set, making sure to exclude the data entries that had a missing arrival delay. Then, we placed these into a one-dimensional vector and then averaged them . We ended up with one dimensional vector which was converted to a table. To finish, we changed the column names of the table to reflect the
carrierlist = c(B6, AA, UA, DL, EV, MQ, 9E, VX, WN, HA, AS, FL, US)
B6list = filter(flights, carrier == "B6" & !is.na(arr_delay))
AAlist = filter(flights, carrier == "AA"& !is.na(arr_delay))
UAlist = filter(flights, carrier == "UA"& !is.na(arr_delay))
DLlist = filter(flights, carrier == "DL"& !is.na(arr_delay))
EVlist = filter(flights, carrier == "EV"& !is.na(arr_delay))
MQlist = filter(flights, carrier == "MQ"& !is.na(arr_delay))
elist = filter(flights, carrier == "9E"& !is.na(arr_delay))
VXlist = filter(flights, carrier == "VX"& !is.na(arr_delay))
WNlist = filter(flights, carrier == "WN"& !is.na(arr_delay))
HAlist = filter(flights, carrier == "HA"& !is.na(arr_delay))
ASlist = filter(flights, carrier == "AS"& !is.na(arr_delay))
USlist = filter(flights, carrier == "US"& !is.na(arr_delay))
FLlist = filter(flights, carrier == "FL"& !is.na(arr_delay))
carrierfilter = c(B6list, AAlist, UAlist, DLlist, EVlist, MQlist, elist, VXlist, WNlist, HAlist, ASlist, USlist, FLlist)
myvector = vector("integer", 13)
myvector[1] = sum(B6list$arr_delay)/ nrow(B6list)
myvector[2] = sum(AAlist$arr_delay)/ nrow(AAlist)
myvector[3] =sum(UAlist$arr_delay)/ nrow(UAlist)
myvector[4] =sum(DLlist$arr_delay) / nrow(DLlist)
myvector[5] =sum(EVlist$arr_delay) / nrow(EVlist)
myvector[6] =sum(MQlist$arr_delay)/ nrow(MQlist)
myvector[7] =sum(elist$arr_delay)/ nrow(elist)
myvector[8] =sum(VXlist$arr_delay)/ nrow(VXlist)
myvector[9] =sum(WNlist$arr_delay)/ nrow(WNlist)
myvector[10] =sum(HAlist$arr_delay)/ nrow(HAlist)
myvector[11] =sum(ASlist$arr_delay)/ nrow(ASlist)
myvector[12] =sum(USlist$arr_delay)/ nrow(USlist)
myvector[13] =sum(FLlist$arr_delay)/ nrow(FLlist)
f = as.data.frame(myvector)
g = as.table(myvector) # Creates table, next line assigns labels to columns
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g)
# To create a graphical representation of the data, we manipulate the data set in a slightly different way:
#First, we create a vector listing all distinct characters
airlines = unique(flights$carrier)
# Again, we remove data for which there is no data (NA)
flights2 = filter(flights,is.na(flights$arr_delay) == FALSE)
# Here, we calculate the average delay of each carrier
avg_delay_by_carrier = aggregate(flights2$arr_delay,list(flights2$carrier),mean)
# Plot the results
ggplot(data = avg_delay_by_carrier) + aes(Group.1, y=x) + geom_bar(stat="identity")
print(flights)
# Chunk 1: setup
# Import the flights data set?
library(nycflights13)
library(dplyr)
library(ggplot2)
# install.packages("nycflights13")
Q0 <- filter(flights, dep_delay >= 2)
sum(Q0$dep_delay < 2) == 0
# Question 1
# Obtain data set where destination is Houston
Q1 = filter(flights, dest == "IAH" | dest == "HOU")
sum(Q1$dest != "IAH" & Q1$dest != "HOU") == 0
# Question 2
# Obtain data set where plane departed an hour late but made up 30 mins during flight
Q2 = filter(flights, (dep_delay >= 60) & (arr_delay == dep_delay - 30))
sum(Q2$dep_delay < 60 & Q2$arr_delay != Q2$dep_delay - 30) == 0
# Question 3
#Find all flights that left between 6AM and 11AM
Q3 = filter(flights, (dep_time >= 600) & (dep_time <= 1100))
sum(Q3$dep_time < 600 & Q3$dep_time > 1100) == 0
# Question 4
# The between method checks if values in fall into a specified range. We can use it to efficiently answer Question 3 because we can easily check if a flight falls between 6AM and 11AM.
Q4 = filter(flights, between(flights$dep_time, 600, 1100) == TRUE)
sum(Q4$dep_time[between(Q4$dep_time, 1101, 2359)] + Q4$dep_time[between(Q4$dep_time, 0, 559)]) == 0
# Question 5
# Finds all flights with missing depart
Q5 = filter(flights, is.na(dep_time))
# Question 6
# Find the top 10 carriers w/ most departure delay time.
Q6 = filter(flights, dep_time > 0) # Creates a object with necessary things
Q6 = Q6[order(Q6$dep_delay, decreasing = TRUE),] # Sorts the object based on the departure delay column
head(Q6$carrier, n = 10) # Returns the first 10 carriers
# Question 7
# Select all data sets that we have been working with in previous questions
myvars = c("dep_time","dep_delay","dest","arr_delay","dep_time","carrier")
Q7  = select(flights, one_of(myvars))
# Question 8
# Convert all the times
Q8 = mutate(flights, dep_time_minutes = (flights$dep_time %/% 100)*60 + flights$dep_time %% 100,sched_dep_time_minutes = (flights$sched_dep_time %/% 100)*60 + flights$sched_dep_time %% 100)
tail(flights)
# Question 9
# Create a metric for figuring out the things
# For each of the different carriers, we created a different data set, making sure to exclude the data entries that had a missing arrival delay. Then, we placed these into a one-dimensional vector and then averaged them . We ended up with one dimensional vector which was converted to a table. To finish, we changed the column names of the table to reflect the
carrierlist = c(B6, AA, UA, DL, EV, MQ, 9E, VX, WN, HA, AS, FL, US)
B6list = filter(flights, carrier == "B6" & !is.na(arr_delay))
AAlist = filter(flights, carrier == "AA"& !is.na(arr_delay))
UAlist = filter(flights, carrier == "UA"& !is.na(arr_delay))
DLlist = filter(flights, carrier == "DL"& !is.na(arr_delay))
EVlist = filter(flights, carrier == "EV"& !is.na(arr_delay))
MQlist = filter(flights, carrier == "MQ"& !is.na(arr_delay))
elist = filter(flights, carrier == "9E"& !is.na(arr_delay))
VXlist = filter(flights, carrier == "VX"& !is.na(arr_delay))
WNlist = filter(flights, carrier == "WN"& !is.na(arr_delay))
HAlist = filter(flights, carrier == "HA"& !is.na(arr_delay))
ASlist = filter(flights, carrier == "AS"& !is.na(arr_delay))
USlist = filter(flights, carrier == "US"& !is.na(arr_delay))
FLlist = filter(flights, carrier == "FL"& !is.na(arr_delay))
carrierfilter = c(B6list, AAlist, UAlist, DLlist, EVlist, MQlist, elist, VXlist, WNlist, HAlist, ASlist, USlist, FLlist)
myvector = vector("integer", 13)
myvector[1] = sum(B6list$arr_delay)/ nrow(B6list)
myvector[2] = sum(AAlist$arr_delay)/ nrow(AAlist)
myvector[3] =sum(UAlist$arr_delay)/ nrow(UAlist)
myvector[4] =sum(DLlist$arr_delay) / nrow(DLlist)
myvector[5] =sum(EVlist$arr_delay) / nrow(EVlist)
myvector[6] =sum(MQlist$arr_delay)/ nrow(MQlist)
myvector[7] =sum(elist$arr_delay)/ nrow(elist)
myvector[8] =sum(VXlist$arr_delay)/ nrow(VXlist)
myvector[9] =sum(WNlist$arr_delay)/ nrow(WNlist)
myvector[10] =sum(HAlist$arr_delay)/ nrow(HAlist)
myvector[11] =sum(ASlist$arr_delay)/ nrow(ASlist)
myvector[12] =sum(USlist$arr_delay)/ nrow(USlist)
myvector[13] =sum(FLlist$arr_delay)/ nrow(FLlist)
f = as.data.frame(myvector)
g = as.table(myvector) # Creates table, next line assigns labels to columns
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g) # Print the table
# To create a graphical representation of the data, we manipulate the data set in a slightly different way:
#First, we create a vector listing all distinct characters
airlines = unique(flights$carrier)
# Again, we remove data for which there is no data (NA)
flights2 = filter(flights,is.na(flights$arr_delay) == FALSE)
# Here, we calculate the average delay of each carrier
avg_delay_by_carrier = aggregate(flights2$arr_delay,list(flights2$carrier),mean)
# Plot the results
ggplot(data = avg_delay_by_carrier) + aes(Group.1, y=x) + geom_bar(stat="identity")
# From both
# Chunk 1: setup
# Import the flights data set?
library(nycflights13)
library(dplyr)
library(ggplot2)
# install.packages("nycflights13")
Q0 <- filter(flights, dep_delay >= 2)
sum(Q0$dep_delay < 2) == 0
# Question 1
# Obtain data set where destination is Houston
Q1 = filter(flights, dest == "IAH" | dest == "HOU")
sum(Q1$dest != "IAH" & Q1$dest != "HOU") == 0
# Question 2
# Obtain data set where plane departed an hour late but made up 30 mins during flight
Q2 = filter(flights, (dep_delay >= 60) & (arr_delay == dep_delay - 30))
sum(Q2$dep_delay < 60 & Q2$arr_delay != Q2$dep_delay - 30) == 0
# Question 3
#Find all flights that left between 6AM and 11AM
Q3 = filter(flights, (dep_time >= 600) & (dep_time <= 1100))
sum(Q3$dep_time < 600 & Q3$dep_time > 1100) == 0
# Question 4
# The between method checks if values in fall into a specified range. We can use it to efficiently answer Question 3 because we can easily check if a flight falls between 6AM and 11AM.
Q4 = filter(flights, between(flights$dep_time, 600, 1100) == TRUE)
sum(Q4$dep_time[between(Q4$dep_time, 1101, 2359)] + Q4$dep_time[between(Q4$dep_time, 0, 559)]) == 0
# Question 5
# Finds all flights with missing depart
Q5 = filter(flights, is.na(dep_time))
# Question 6
# Find the top 10 carriers w/ most departure delay time.
Q6 = filter(flights, dep_time > 0) # Creates a object with necessary things
Q6 = Q6[order(Q6$dep_delay, decreasing = TRUE),] # Sorts the object based on the departure delay column
head(Q6$carrier, n = 10) # Returns the first 10 carriers
# Question 7
# Select all data sets that we have been working with in previous questions
myvars = c("dep_time","dep_delay","dest","arr_delay","dep_time","carrier")
Q7  = select(flights, one_of(myvars))
# Question 8
# Convert all the times
Q8 = mutate(flights, dep_time_minutes = (flights$dep_time %/% 100)*60 + flights$dep_time %% 100,sched_dep_time_minutes = (flights$sched_dep_time %/% 100)*60 + flights$sched_dep_time %% 100)
tail(flights)
# Question 9
# Create a metric for figuring out the things
# For each of the different carriers, we created a different data set, making sure to exclude the data entries that had a missing arrival delay. Then, we placed these into a one-dimensional vector and then averaged them . We ended up with one dimensional vector which was converted to a table. To finish, we changed the column names of the table to reflect the
carrierlist = c(B6, AA, UA, DL, EV, MQ, 9E, VX, WN, HA, AS, FL, US)
B6list = filter(flights, carrier == "B6" & !is.na(arr_delay))
AAlist = filter(flights, carrier == "AA"& !is.na(arr_delay))
UAlist = filter(flights, carrier == "UA"& !is.na(arr_delay))
DLlist = filter(flights, carrier == "DL"& !is.na(arr_delay))
EVlist = filter(flights, carrier == "EV"& !is.na(arr_delay))
MQlist = filter(flights, carrier == "MQ"& !is.na(arr_delay))
elist = filter(flights, carrier == "9E"& !is.na(arr_delay))
VXlist = filter(flights, carrier == "VX"& !is.na(arr_delay))
WNlist = filter(flights, carrier == "WN"& !is.na(arr_delay))
HAlist = filter(flights, carrier == "HA"& !is.na(arr_delay))
ASlist = filter(flights, carrier == "AS"& !is.na(arr_delay))
USlist = filter(flights, carrier == "US"& !is.na(arr_delay))
FLlist = filter(flights, carrier == "FL"& !is.na(arr_delay))
carrierfilter = c(B6list, AAlist, UAlist, DLlist, EVlist, MQlist, elist, VXlist, WNlist, HAlist, ASlist, USlist, FLlist)
myvector = vector("integer", 13)
myvector[1] = sum(B6list$arr_delay)/ nrow(B6list)
myvector[2] = sum(AAlist$arr_delay)/ nrow(AAlist)
myvector[3] =sum(UAlist$arr_delay)/ nrow(UAlist)
myvector[4] =sum(DLlist$arr_delay) / nrow(DLlist)
myvector[5] =sum(EVlist$arr_delay) / nrow(EVlist)
myvector[6] =sum(MQlist$arr_delay)/ nrow(MQlist)
myvector[7] =sum(elist$arr_delay)/ nrow(elist)
myvector[8] =sum(VXlist$arr_delay)/ nrow(VXlist)
myvector[9] =sum(WNlist$arr_delay)/ nrow(WNlist)
myvector[10] =sum(HAlist$arr_delay)/ nrow(HAlist)
myvector[11] =sum(ASlist$arr_delay)/ nrow(ASlist)
myvector[12] =sum(USlist$arr_delay)/ nrow(USlist)
myvector[13] =sum(FLlist$arr_delay)/ nrow(FLlist)
f = as.data.frame(myvector)
g = as.table(myvector) # Creates table, next line assigns labels to columns
names(g) = c("B6", "AA", "UA", "DL", "EV", "MQ", "9E", "VX", "WN", "HA", "AS", "US", "FL")
print(g) # Print the table
# To create a graphical representation of the data, we manipulate the data set in a slightly different way:
#First, we create a vector listing all distinct characters
airlines = unique(flights$carrier)
# Again, we remove data for which there is no data (NA)
myflights = filter(flights,is.na(flights$arr_delay) == FALSE)
# Here, we calculate the average delay of each carrier
delay_by_carrier = aggregate(myflights$arr_delay,list(myflights$carrier),mean)
# Plot the results
ggplot(data = delay_by_carrier) + aes(Group.1, y=x) + geom_bar(stat="identity")
# From both the graph and the table, we are able to see that carrier "AS" and carrier "HA" are the airlines that are first and second in being on time, respectively. The carriers "F9" and "FL" are the worst and second worst at being on time, respectively.
install.packages("babynames")
head(babynames, n = 5)
library(babynames)
data("babynames")
head(babynames, n = 5)
babynames %>%
filter(sex %>% equals("M"))
install.packages("magrittr")
filter(sex %>% equals("M")) %>%
head(babynames)
head(babynames, n = 5)
babynames %>%
filter(sex %>% equals("M")) %>%
head(babynames)
babynames %>%
filter(sex %>% equals("M")) %>%
%>%
babynames %>%
filter(sex %>% equals("M")) %>%
%>%
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require(dplyr)
library(plyr)
library(data.table)
library(ggplot2)
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/SourceData')  #Set the working directory
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/Source\ Data')  #Set the working directory
divindex = read.csv("diversityindexpercounty.csv", header = TRUE, stringsAsFactors = FALSE)
divindex = read.csv("Diversity\ Index\ Per\ County.csv", header = TRUE, stringsAsFactors = FALSE)
divindex = subset(divindex, divindex$STATE != "") %>% select(COUNTY, STATE, Diversity.Index)
divindex = mutate(divindex, STATE = substr(divindex$STATE, 2,3))
divindex = mutate(divindex, COUNTYSTATE = paste(COUNTY, STATE, sep = ", "))
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/IPUMSData/educationdata')  #Set the working directory
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/IPUMS\ Data/Education\ Data')  #Set the working directory
countydata = read.csv("national_county.csv", header = FALSE, stringsAsFactors = FALSE)
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/Source\ Data')  #Set the working directory
countydata = read.csv("national_county.csv", header = FALSE, stringsAsFactors = FALSE)
countydata = mutate(countydata, fullname = paste(V4, V1, sep = ", "))
countydata = select(countydata, -V5)
countydata = rename(countydata, c("V1"="STATE", "V2"="STATEFIP", "V3"="COUNTYFIPS", "V4"="COUNTY", "fullname"="fullname"))
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/IPUMS\ Data/Education\ Data')  #Set the working directory
edudata = read.csv("ipums_educ.csv", header = TRUE, stringsAsFactors = FALSE) # Load data csv
# Data cleaning and manipulation
school1 = select(edudata, -GQ, -DATANUM, -RACE, -RACED, -PERNUM, -PERWT, -SERIAL, -HHWT)
school2 = subset(school1, edudata$SCHOOL == 1 & edudata$YEAR == 2011 & edudata$COUNTYFIPS != 0)
school3 = inner_join(school2, countydata, by="STATEFIP", "COUNTYFIPS")
school4 = subset(school3, school3$COUNTYFIPS.x == school3$COUNTYFIPS.y)
# Clean up oolsout
school5 = select(school4, -REGION, -YEAR, -SCHOOL, -COUNTYFIPS.y, -fullname)
school6 = full_join(school5, divindex, by="COUNTY")
school7 = subset(school6, school6$STATE.x == school6$STATE.y)
school8 = mutate(school7, STATECOUNTY=paste(COUNTY, STATE.x, sep=", "))
school9 = select(school8, EDUC, EDUCD, STATECOUNTY, Diversity.Index)
school10= as.data.frame(table(school9$STATECOUNTY))
school11 = rename(school10, c("Var1"="STATECOUNTY", "Freq"="freq"))
# Cleaning
require(dplyr)
library(plyr)
library(data.table)
library(ggplot2)
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/Source\ Data')  #Set the working directory
divindex = read.csv("Diversity\ Index\ Per\ County.csv", header = TRUE, stringsAsFactors = FALSE)
divindex = subset(divindex, divindex$STATE != "") %>% select(COUNTY, STATE, Diversity.Index)
divindex = mutate(divindex, STATE = substr(divindex$STATE, 2,3))
divindex = mutate(divindex, COUNTYSTATE = paste(COUNTY, STATE, sep = ", "))
countydata = read.csv("national_county.csv", header = FALSE, stringsAsFactors = FALSE)
countydata = mutate(countydata, fullname = paste(V4, V1, sep = ", "))
View(divindex)
countydata = select(countydata, -V5)
countydata = rename(countydata, c("V1"="STATE", "V2"="STATEFIP", "V3"="COUNTYFIPS", "V4"="COUNTY", "fullname"="fullname"))
setwd('/Users/jackpetersen/STAT_405_Diversity_Project/IPUMS\ Data/Education\ Data')  #Set the working directory
edudata = read.csv("ipums_educ.csv", header = TRUE, stringsAsFactors = FALSE) # Load data csv
# Data cleaning and manipulation
school1 = select(edudata, -GQ, -DATANUM, -RACE, -RACED, -PERNUM, -PERWT, -SERIAL, -HHWT)
school2 = subset(school1, edudata$SCHOOL == 1 & edudata$YEAR == 2011 & edudata$COUNTYFIPS != 0)
school3 = inner_join(school2, countydata, by="STATEFIP", "COUNTYFIPS")
school4 = subset(school3, school3$COUNTYFIPS.x == school3$COUNTYFIPS.y)
# Clean up oolsout
school5 = select(school4, -REGION, -YEAR, -SCHOOL, -COUNTYFIPS.y, -fullname)
school6 = full_join(school5, divindex, by="COUNTY")
View(school5)
school5 = rename(school5, c("STATEFIP"="STATEFIP", "COUNTY.x"="COUNTY.x", "COUNTYFIPS.x"="COUNTYFIPS.x", "EDUC"="EDUC", "EDUCD"="EDUCD", "STATE"="STATE", "COUNTY.y"="COUNTY"))
school6 = full_join(school5, divindex, by="COUNTY")
school7 = subset(school6, school6$STATE.x == school6$STATE.y)
school8 = mutate(school7, STATECOUNTY=paste(COUNTY, STATE.x, sep=", "))
school9 = select(school8, EDUC, EDUCD, STATECOUNTY, Diversity.Index)
school10= as.data.frame(table(school9$STATECOUNTY))
school11 = rename(school10, c("Var1"="STATECOUNTY", "Freq"="freq"))
# Cleaning
# The All important education index
school12.dt = data.table(school9)
school13 = school12.dt[,list(EDUC=(sum(EDUC))), by="STATECOUNTY"]
school14 = inner_join(school13, school11, by="STATECOUNTY")
school15 = mutate(school14, avg = EDUC/freq)
school16 = inner_join(school15, school9, by="STATECOUNTY")
school17 = school16[!duplicated(school16[,c('STATECOUNTY','avg')]),] %>% select(-EDUC.y, -EDUCD)
linegraph = ggplot(school17, aes(x=Diversity.Index, y=avg)) + geom_point()#Create point graph
linegraph = linegraph + labs(title="Diversity by Education Level", x="Diversity Index", y="Education")
linegraph = linegraph + geom_smooth(method=lm, se=TRUE)
linegraph
