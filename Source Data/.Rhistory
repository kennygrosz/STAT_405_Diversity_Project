mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
}
mean_arr_delay
ggplot(Q9, aes(carrier, dep_difficulty2)) + geom_tile(aes(fill=dep_delay))
```
mean_arr_delay=c()
diff_df=c()
#build vectors for mean arrival delays based on difficults
for (j in seq(1,3)) {
for (i in seq(1,length(carriers))) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
mean_arr_delay=c()
diff_df=c()
diff_df
mean_arr_delay
for (j in seq(1,3)) {
for (i in seq(1,length(carriers)/3)) {
temp=filter(Q9, carrier==carriers[i], !is.na(arr_delay), dep_difficulty2==diff_uniq[j])
mean_arr_delay[(j-1)*length(carriers)/3+i]=mean(temp$arr_delay)
diff_df[(j-1)*length(carriers)/3+i]=j
}}
diff_df
mean_arr_delay
difficulty_df=data.frame(carriers,diff_df,mean_arr_delay)
ggplot(difficulty_df, aes(carriers, diff_df)) + geom_tile(aes(fill=mean_arr_delay))
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier=carriers[i])
mean_arr_delay=mean(temp$arr_delay)
}
carriers=c(unique(Q9$carrier))
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
mean_arr_delay=mean(temp$arr_delay)
}
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(mean_dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_dep_delay[i]=mean(temp$arr_delay)
}
mean_arr_delay[i]=mean(temp$arr_delay)
mean_arr_delay
mean_arr_delay=c()
mean_dep_delay=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay)
summary_df
mutate(summary_df, diff=mean_arr_delay-mean_dep_delap)
mutate(summary_df, diff=mean_arr_delay-mean_dep_delay)
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
ggplot(summary_df, aes(carriers, y = arrange(mean_dep_delay, desc())))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))
ggplot(summary_df, aes(carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, y = arrange(summary_df,desc(mean_dep_delay))))+ geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
summary_df=arrange(summary_df, desc(mean_dep_delay))
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay, fill = mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity')
ggplot(summary_df, aes(x=carriers, mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
mean_arr_delay
mean_dep_delay
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, made_up_time=mean_dep_delay-mean_arr_delay)
summary_df=arrange(summary_df, desc(mean_dep_delay))
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Carriers")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines are best at making up time in the air
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Carriers")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -made_up_time), made_up_time)) +  geom_bar(stat='identity',aes(fill=made_up_time))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, -score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
mean_dep_delay=c()
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp)
}
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
flights=c()
for (i in seq(1,length(carriers))) {
temp = filter(Q9, !is.na(arr_delay), !is.na(dep_delay), carrier==carriers[i])
mean_arr_delay[i]=mean(temp$arr_delay)
mean_dep_delay[i]=mean(temp$dep_delay)
flights[i]=length(temp$carrier)
}
mean_arr_delay
mean_dep_delay
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
ggplot(summary_df, aes(x=reorder(carriers, +score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
summary_df=data.frame(carriers,mean_dep_delay,mean_arr_delay,flights)
summary_df
summary_df=mutate(summary_df, score=.6*mean_arr_delay + .4*mean_dep_delay)
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("Time Made up in the Air (min)") + xlab("Carriers")+ggtitle("Amount of Time Made Up In The Air")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, -mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
one")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
summary_df=mutate(summary_df, score=.7*mean_arr_delay + .3*mean_dep_delay)
# plot which airlines are best at getting off the ground on time
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("ON-TIME SCORE")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score"")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines Based on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',positoin="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
ggplot(summary_df, aes(x=reorder(carriers, mean_dep_delay), mean_dep_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_dep_delay))+ylab("Mean Departure Delay (min)") + xlab("Airline")+ggtitle("Airline Departure Delay Times")+theme(legend.position="none")
# plot which airlines are best at arriving on time
ggplot(summary_df, aes(x=reorder(carriers, mean_arr_delay), mean_arr_delay)) +  geom_bar(stat='identity',position="identity",aes(fill=mean_arr_delay))+ylab("Mean Arrival Delay (min)") + xlab("Airline")+ggtitle("Airline Arrival Delay Times")+theme(legend.position="none")
# plot which airlines have the best scores for being on time
ggplot(summary_df, aes(x=reorder(carriers, score), score)) +  geom_bar(stat='identity',position="identity",aes(fill=score))+ylab("On-Time Score") + xlab("Airline")+ggtitle("Ranking Airlines on Punctuality Based on On-Time Score")+theme(legend.position="none")
require(tidyverse)
require(stringr)
require(forcats)
require(ggplot2)
require(choroplethr)
require(choroplethrMaps)
require(dplyr)
# SET WORKING DIRECTORY
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/IPUMS Data/Education Data")
#Read in File
read.csv("ipums_educ.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
A
A_df = tbl_df(A)
head(A_df)
A_df_char = mutate(A_df, SFIP_char = as.character(STATEFIP), CFIP_char = as.character(COUNTYFIPS))
A_df_char$SFIP_char = str_pad(A_df_char$SFIP_char, 2, pad = "0")
A_df_char$CFIP_char = str_pad(A_df_char$CFIP_char, 3, pad = "0")
head(A_df)
head(A_df_char)
A_df_char = mutate(A_df_char, FIPS = paste(SFIP_char, CFIP_char, sep = ""))
head(A_df_char)
unique(A_df_char$FIPS)
#HAVE TO ADD COLUMNS FOR EACH RACE, WHICH WILL MAKE SUMMARIZING EASIER
A2=A_df_char %>% mutate(W = ifelse(RACE==1,1,0))
A2 = A2 %>% mutate(B = ifelse(RACE==2,1,0))
A2 = A2 %>% mutate(AI = ifelse(RACE==3,1,0))
A2 = A2 %>% mutate(C = ifelse(RACE==4,1,0))
A2 = A2 %>% mutate(J = ifelse(RACE==5,1,0))
A2 = A2 %>% mutate(O = ifelse(RACE==7 | RACE == 8 | RACE == 9 ,1,0))
A2 = A2 %>% mutate(PI = ifelse(RACE==6,1,0))
by_county = A2 %>% group_by(COUNTYFIPS) %>% dplyr::summarise( tot = n(), W = sum(W)/tot, B = sum(B)/tot, AI = sum (AI)/tot, C = sum(C)/tot, J = sum(J)/tot, PI = sum(PI)/tot, O = sum(O)/tot)
by_county = mutate(by_county,TOT = W+B+AI+C+J+PI+O)
by_county = by_county %>% mutate(DiversityIndex = 1 - W^2-B^2-AI^2-C^2 -J^2 - PI^2 - O^2)
by_county = arrange(by_county, desc(DiversityIndex))
by_county
by_county = A2 %>% group_by(FIPS) %>% dplyr::summarise( tot = n(), W = sum(W)/tot, B = sum(B)/tot, AI = sum (AI)/tot, C = sum(C)/tot, J = sum(J)/tot, PI = sum(PI)/tot, O = sum(O)/tot)
by_county = mutate(by_county,TOT = W+B+AI+C+J+PI+O)
by_county = by_county %>% mutate(DiversityIndex = 1 - W^2-B^2-AI^2-C^2 -J^2 - PI^2 - O^2)
by_county = arrange(by_county, desc(DiversityIndex))
by_county
mapping = select(by_county, COUNTYFIPS, DiversityIndex)
by_county
mapping = select(by_county, FIPS, DiversityIndex)
mapping = dplyr::rename(mapping, region=FIPS, value=DiversityIndex)
head(mapping)
county_choropleth(mapping)
mapping$region = as.numeric(mapping$region)
head(mapping)
county_choropleth(mapping)
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Diversity Analysis")
#Read in File
read.csv("large_sample_races.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
A
A_df = tbl_df(A)
#format FIPs!
head(A_df)
A_df_char = mutate(A_df, SFIP_char = as.character(STATEFIP), CFIP_char = as.character(COUNTYFIPS))
A_df_char$SFIP_char = str_pad(A_df_char$SFIP_char, 2, pad = "0")
A_df_char$CFIP_char = str_pad(A_df_char$CFIP_char, 3, pad = "0")
head(A_df_char)
A_df_char = mutate(A_df_char, FIPS = paste(SFIP_char, CFIP_char, sep = ""))
A2=A_df_char %>% mutate(W = ifelse(RACE==1,1,0))
A2 = A2 %>% mutate(B = ifelse(RACE==2,1,0))
A2 = A2 %>% mutate(AI = ifelse(RACE==3,1,0))
A2 = A2 %>% mutate(C = ifelse(RACE==4,1,0))
A2 = A2 %>% mutate(J = ifelse(RACE==5,1,0))
A2 = A2 %>% mutate(PI = ifelse(RACE==6,1,0))
A2 = A2 %>% mutate(O = ifelse(RACE==7 | RACE == 8 | RACE == 9 ,1,0))
by_county = A2 %>% group_by(FIPS) %>% dplyr::summarise( tot = n(), W = sum(W)/tot, B = sum(B)/tot, AI = sum (AI)/tot, C = sum(C)/tot, J = sum(J)/tot, PI = sum(PI)/tot, O = sum(O)/tot)
by_county = mutate(by_county,TOT = W+B+AI+C+J+PI+O)
by_county = by_county %>% mutate(DiversityIndex = 1 - W^2-B^2-AI^2-C^2 -J^2 - PI^2 - O^2)
by_county = arrange(by_county, desc(DiversityIndex))
by_county
mapping = select(by_county, FIPS, DiversityIndex)
mapping = dplyr::rename(mapping, region=FIPS, value=DiversityIndex)
mapping$region = as.numeric(mapping$region)
head(mapping)
county_choropleth(mapping)
filter(FIPS=48453)
filter(A2, FIPS=48453)
filter(A2, FIPS==48453)
filter(mapping, FIPS==48453)
filter(mapping, value==48453)
county_choropleth(mapping)
?state.regions
head(state.regions)
data(state.regions)
head(state.regions)
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("california"))
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("california"), reference_map = TRUE)
county_choropleth(mapping, title = "Diversity Index in Counties Across the US")
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("florida"))
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("new york"))
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("alabama"))
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("alaska"))
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom = c("illinois"))
B = read.table("fips_county_key.txt", sep=",", col.names = c("State Abbev","State FIP","County FIP","Misc"))
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Diversity Analysis")
B = read.table("fips_counties_key.txt", sep=",", col.names = c("State Abbev","State FIP","County FIP","Misc"))
B = read.table("fips_counties_key.txt", sep=",", col.names = c("State Abbev","State FIP","County FIP","County","Misc"))
B = read.table("fips_counties_key.txt", sep=",")
read.csv("fips_codes_website.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
B
View(A2)
View(B)
read.csv("fips_codes_website.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
B
head(B)
B2$State.FIPS.Code = as.character(B2$State.FIPS.Code)
B2$State.FIPS.Code = as.character(B$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = as.character(B$State.FIPS.Code)
B2 =B
B2$State.FIPS.Code = as.character(B$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = str_pad(B$State.FIPS.Code, 2, pad = "0")
head(B2)
B2$State.FIPS.Code = str_pad(B$State.FIPS.Code, 2, pad = "0")
B2$State.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
head(B2)
head(B)
B2 =B
B2$State.FIPS.Code = as.character(B$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$County.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
B2$State.FIPS.Code = str_pad(B$State.FIPS.Code, 2, pad = "0")
head(B2)
B2 = mutate(FIPS = paste(State.FIPS.Code,County.FIPS.Code))
B2$County.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code))
head(B2)
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
head(B2)
head(by_county)
C = left_join(by_county, B2, by = "FIPS")
C
by_county
filter(B2, FIPS = "15003")
filter(B2, FIPS == "15003")
B2 = filter (B, Entity.Description == "County")
B2$State.FIPS.Code = as.character(B$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = str_pad(B$State.FIPS.Code, 2, pad = "0")
B2$County.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
head(B2)
filter(B2, FIPS == "15003")
B2 = filter (B, Entity.Description == "County")
head(B2)
B2$State.FIPS.Code = as.character(B2$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = str_pad(B$State.FIPS.Code, 2, pad = "0")
B2$County.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
head(B2)
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
B2$County.FIPS.Code = str_pad(B$County.FIPS.Code, 3, pad = "0")
head(B)
B2 = filter (B, Entity.Description == "County")
head(B2)
B2$State.FIPS.Code = as.character(B2$State.FIPS.Code)
B2$County.FIPS.Code = as.character(B2$County.FIPS.Code)
B2$State.FIPS.Code = str_pad(B2$State.FIPS.Code, 2, pad = "0")
B2$County.FIPS.Code = str_pad(B2$County.FIPS.Code, 3, pad = "0")
B2 = mutate(B2,FIPS = paste(State.FIPS.Code,County.FIPS.Code, sep = ""))
head(B2)
filter(B2, FIPS == "15003")
C = left_join(by_county, B2, by = "FIPS")
C
View(C)
C2 = select(C, FIPS, DiversityIndex, State.Abbreviation, GU.Name)
C2
county_choropleth(mapping, title = "Diversity Index in Counties Across the US")
county_choropleth(mapping, title = "Diversity Index in Counties Across the US", state_zoom=c("california"))
View(by_county)
View(by_county)
county_choropleth(mapping, title = "Diversity Index in Counties in California", state_zoom=c("california"))
county_choropleth(mapping, title = "Diversity Index in Counties in California")
library(tidyverse)
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Diversity Analysis")
read.csv("large_sample_races.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
A
#Read in County FIPS Key
read.csv("fips_codes_website.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
B
warnings()
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Source Data")
read.csv("Education.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
edu
read.csv("Education.xls", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
edu
setwd("C:/Users/kenny/OneDrive/Documents/Fall 2016/STAT 405- R for Data Science/STAT_405_Diversity_Project/Source Data")
read.csv("Education.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
edu
##Merge two datasets
by_county$FIPS<-as.numeric(by_county$FIPS)
edu_comb<-left_join(by_county, edu, by=c("FIPS"="FIPS.Code"))
read.csv("Education.csv", header = TRUE, stringsAsFactors = FALSE) %>%
tbl_df() ->
edu
##Merge two datasets
by_county$FIPS<-as.numeric(by_county$FIPS)
edu_comb<-left_join(by_county, edu, by=c("FIPS"="FIPS.Code"))
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.less.than.a.high.school.diploma..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs No High School Diploma Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.a.high.school.diploma.only..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs High School Diploma Only Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.less.than.a.high.school.diploma..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs No High School Diploma Percentage")
View(edu_comb)
##Plot
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.less.than.a.high.school.diploma..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs No High School Diploma Percentage")
##Plot
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.less.than.a.high.school.diploma....2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs No High School Diploma Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.a.high.school.diploma.only..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs High School Diploma Only Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.completing.some.college.or.associate.s.degree..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs Completing College or Associate Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.a.bachelor.s.degree.or.higher..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs Bachelor Degree or Higher Percentage")
##Linear Regression Analysis
l1<-lm(Percent.of.adults.with.less.than.a.high.school.diploma..2010.2014~DiversityIndex, data = edu_comb)
##summary(l1)
l2<-lm(Percent.of.adults.with.a.high.school.diploma.only..2010.2014~DiversityIndex, data = edu_comb)
##summary(l2)
l3<-lm(Percent.of.adults.completing.some.college.or.associate.s.degree..2010.2014~DiversityIndex, data = edu_comb)
##summary(l3)
l4<-lm(Percent.of.adults.with.a.bachelor.s.degree.or.higher..2010.2014~DiversityIndex, data = edu_comb)
##summary(l4)
l1<-lm(Percent.of.adults.with.less.than.a.high.school.diploma....2010.2014~DiversityIndex, data = edu_comb)
##### *Commentary and Interpretation:*
From graphs above we can see that all rates seems not to have strong correlation with the diversity index. We also conducted the linear regression analysis and all regressions have a relatively poor $R^{2}$, with the maxumum at 13.27% (the regression between diversity index and the percent of completing a high school diploma only).
##Plot
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.less.than.a.high.school.diploma....2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs No High School Diploma Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.a.high.school.diploma.only..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs High School Diploma Only Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.completing.some.college.or.associate.s.degree..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs Completing College or Associate Percentage")
edu_comb %>%
ggplot(aes(x=DiversityIndex,
y=Percent.of.adults.with.a.bachelor.s.degree.or.higher..2010.2014))+
geom_point()+geom_smooth()+
ylab("Percentage")+
xlab("Diversity Index")+
ggtitle("Diversity vs Bachelor Degree or Higher Percentage")
##Linear Regression Analysis
l1<-lm(Percent.of.adults.with.less.than.a.high.school.diploma....2010.2014~DiversityIndex, data = edu_comb)
##summary(l1)
l2<-lm(Percent.of.adults.with.a.high.school.diploma.only..2010.2014~DiversityIndex, data = edu_comb)
##summary(l2)
l3<-lm(Percent.of.adults.completing.some.college.or.associate.s.degree..2010.2014~DiversityIndex, data = edu_comb)
##summary(l3)
l4<-lm(Percent.of.adults.with.a.bachelor.s.degree.or.higher..2010.2014~DiversityIndex, data = edu_comb)
